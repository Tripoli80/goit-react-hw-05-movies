{"version":3,"file":"static/js/736.f526e02f.chunk.js","mappings":"qPAGaA,EAAUC,EAAAA,EAAAA,IAAH,wCAIPC,EAAMD,EAAAA,EAAAA,GAAF,4R,SC8BjB,EA/Ba,WACX,OAAgCE,EAAAA,EAAAA,UAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACQC,GAAiBC,EAAAA,EAAAA,MAAjBD,aAIR,IAHAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAaH,GAAcI,KAAKL,EACjC,GAAE,CAACC,KACCF,EACH,OAAO,KAET,IACMO,EADSP,EAASQ,KAAKC,KACJC,KAAI,SAAAC,GAC3B,IAAQC,EAA+CD,EAA/CC,GAAIC,EAA2CF,EAA3CE,aAAcC,EAA6BH,EAA7BG,cAAeC,EAAcJ,EAAdI,UAEzC,OACE,UAACjB,EAAD,YACE,SAACF,EAAD,CACEoB,IACEH,EAAY,yCAC0BA,GAClC,yDAGR,kCAAUC,MACV,uCAAeC,OATNH,EAYd,IAED,OAAO,wBAAKL,GACb,C,6MChCKU,EAAU,mCAEVC,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,kCADX,SAIeC,EAAY,GAAZA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,4GAA6BC,OAAAA,OAA7B,MAAsC,MAAtC,MAA6CC,OAAAA,OAA7C,MAAsD,MAAtD,EACQC,EADR,oBAC2BF,EAD3B,YACqCC,GAC7BE,EAAa,CACjBC,QAAST,GAHb,kBAMuBC,EAASS,IAAIH,EAAK,CACnCI,OAAQH,IAPd,cAMUjB,EANV,iCASeA,EAAKA,KAAKqB,UATzB,kCAWIC,QAAQC,MAAR,MAXJ,0FAceC,EAAY,GAAZA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA2BpB,GAA3B,kFACQY,EADR,gBACuBZ,GACfa,EAAa,CACjBC,QAAST,GAHb,kBAMuBC,EAASS,IAAIH,EAAK,CACnCI,OAAQH,IAPd,cAMUjB,EANV,yBASWA,GATX,gCAWIsB,QAAQC,MAAR,MAXJ,yFAee1B,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BO,GAA5B,kFACQY,EADR,iBACwBZ,EADxB,YAEQa,EAAa,CACjBC,QAAST,GAHb,kBAMuBC,EAASS,IAAIH,EAAK,CACnCI,OAAQH,IAPd,cAMUjB,EANV,yBASWA,GATX,gCAWIsB,QAAQC,MAAR,MAXJ,yFAceE,EAAe,GAAfA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA8BrB,GAA9B,kFACUY,EADV,iBAC0BZ,EAD1B,YAEUa,EAAa,CACjBC,QAAST,GAHf,kBAMyBC,EAASS,IAAIH,EAAK,CACnCI,OAAQH,IAPhB,cAMYjB,EANZ,yBASaA,GATb,gCAWMsB,QAAQC,MAAR,MAXN,yFAciBG,EAAgB,GAAhBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BC,GAA/B,+FAEQV,EAAa,CACjBC,QAAST,EACTkB,MAAOA,GAJX,kBAOuBjB,EAASS,IAPhC,gBAOyC,CACnCC,OAAQH,IARd,cAOUjB,EAPV,yBAUWA,GAVX,gCAYIsB,QAAQC,MAAR,MAZJ,gF","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/apiFilm.js"],"sourcesContent":["import styled from '@emotion/styled';\n\n\nexport const Portret = styled.img`\n  width: 50px;\n`;\n\nexport const Item =styled.li`\n/* border: 1px solid blue; */\n-webkit-box-shadow: 0px 0px 56px -14px rgba(148,99,148,1);\n-moz-box-shadow: 0px 0px 56px -14px rgba(148,99,148,1);\nbox-shadow: 0px 0px 56px -14px rgba(148,99,148,1);\n\nborder-radius: 5px;\nmargin-bottom: 20px;\npadding: 5px;\n`","import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { getCastsById } from 'services/apiFilm';\nimport { useParams } from 'react-router-dom';\nimport { Item, Portret } from './Cast.styled';\n\nconst Cast = () => {\n  const [castInfo, setCastInfo] = useState(0);\n  const { idSelectFilm } = useParams();\n  useEffect(() => {\n    getCastsById(idSelectFilm).then(setCastInfo);\n  }, [idSelectFilm]);\n  if (!castInfo) {\n    return null;\n  }\n  const actors = castInfo.data.cast;\n  const actorList = actors.map(actor => {\n    const { id, profile_path, original_name, character } = actor;\n\n    return (\n      <Item key={id}>\n        <Portret\n          src={\n            profile_path\n              ? `https://image.tmdb.org/t/p/w500${profile_path}`\n              : 'https://klpmotors.ru/tpl/palitra/images/nophoto.jpg'\n          }\n        />\n        <p>Name: {original_name}</p>\n        <p>Character: {character}</p>\n      </Item>\n    );\n  });\n\n  return <ul>{actorList}</ul>;\n};\n\nexport default Cast;\n","// import axios from 'axios';\n\nimport axios from 'axios';\nconst API_KEY = 'f2c538717486cd7dc01f7314dfb697ab';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n});\n\nasync function getTrending({ genres = 'all', window = 'day' }) {\n  const URL = `/trending/${genres}/${window}`;\n  const parameters = {\n    api_key: API_KEY,\n  };\n  try {\n    const data = await instance.get(URL, {\n      params: parameters,\n    });\n    return [...data.data.results];\n  } catch (error) {\n    console.error(error);\n  }\n}\nasync function getFilmById(id) {\n  const URL = `movie/${id}`;\n  const parameters = {\n    api_key: API_KEY,\n  };\n  try {\n    const data = await instance.get(URL, {\n      params: parameters,\n    });\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function getCastsById(id) {\n  const URL = `/movie/${id}/credits`;\n  const parameters = {\n    api_key: API_KEY,\n  };\n  try {\n    const data = await instance.get(URL, {\n      params: parameters,\n    });\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n}\nasync function getReviewsById(id) {\n    const URL = `/movie/${id}/reviews`;\n    const parameters = {\n      api_key: API_KEY,\n    };\n    try {\n      const data = await instance.get(URL, {\n        params: parameters,\n      });\n      return data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  async function getMovisByQuery(query) {\n    const URL = `/search/movie`;\n    const parameters = {\n      api_key: API_KEY,\n      query: query\n    };\n    try {\n      const data = await instance.get(URL, {\n        params: parameters,\n      });\n      return data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\nexport { getTrending, getFilmById, getMovisByQuery,getCastsById, getReviewsById };\n"],"names":["Portret","styled","Item","useState","castInfo","setCastInfo","idSelectFilm","useParams","useEffect","getCastsById","then","actorList","data","cast","map","actor","id","profile_path","original_name","character","src","API_KEY","instance","axios","baseURL","getTrending","genres","window","URL","parameters","api_key","get","params","results","console","error","getFilmById","getReviewsById","getMovisByQuery","query"],"sourceRoot":""}